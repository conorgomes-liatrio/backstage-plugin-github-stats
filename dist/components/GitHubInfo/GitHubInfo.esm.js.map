{"version":3,"file":"GitHubInfo.esm.js","sources":["../../../src/components/GitHubInfo/GitHubInfo.tsx"],"sourcesContent":["import React from 'react';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { useApi, githubAuthApiRef } from '@backstage/core-plugin-api';\nimport { Card, CardContent, CardHeader, makeStyles, Avatar, Box, Grid, Theme, Typography } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { Progress } from '@backstage/core-components';\nimport ReactMarkdown from 'react-markdown';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  contributorsList: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  },\n  link: {\n    color: '#1976d2',\n    textDecoration: 'underline',\n    '&:hover': {\n      textDecoration: 'none',\n    },\n  },\n  commitInfo: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    marginBottom: 0,\n  },\n  avatar: {\n    width: theme.spacing(2.5),\n    height: theme.spacing(2.5),\n  },\n}));\n\ntype Contributor = {\n  login: string;\n  avatarUrl: string;\n  profileUrl: string;\n  commitCount: number;\n};\n\ntype GitHubData = {\n  readme: string;\n  issueCount: number;\n  issuesUrl: string;\n  prCount: number;\n  prsUrl: string;\n  lastCommit: {\n    date: string;\n    author: string;\n    authorUrl: string;\n    commitUrl: string;\n    avatarUrl: string;\n  } | null;\n  recentContributors: Contributor[];\n};\n\nexport const GitHubInfo = () => {\n  const classes = useStyles();\n  const { entity } = useEntity();\n  const githubUrl = entity.metadata.annotations?.['github.com/project-slug'];\n\n  // Don't render anything if there's no GitHub URL\n  if (!githubUrl) {\n    return null;\n  }\n\n  const githubAuth = useApi(githubAuthApiRef);\n  const [error, setError] = React.useState<string | null>(null);\n  const [loading, setLoading] = React.useState(true);\n  const [data, setData] = React.useState<GitHubData | null>(null);\n\n  React.useEffect(() => {\n    const fetchGitHubData = async (): Promise<GitHubData | null> => {\n      try {\n\n        const token = await githubAuth.getAccessToken(['repo']);\n        \n        // Fetch repository data\n        const repoResponse = await fetch(`https://api.github.com/repos/${githubUrl}`, {\n          headers: {\n            Authorization: `token ${token}`,\n          },\n        });\n        \n        if (!repoResponse.ok) {\n          throw new Error('Failed to fetch repository data');\n        }\n\n        // Fetch README\n        const readmeResponse = await fetch(`https://api.github.com/repos/${githubUrl}/readme`, {\n          headers: {\n            Authorization: `token ${token}`,\n            Accept: 'application/vnd.github.raw',\n          },\n        });\n        \n        if (!readmeResponse.ok) {\n          throw new Error('Failed to fetch README');\n        }\n\n        // Fetch issues count\n        const issuesResponse = await fetch(`https://api.github.com/repos/${githubUrl}/issues?state=open`, {\n          headers: {\n            Authorization: `token ${token}`,\n          },\n        });\n        \n        if (!issuesResponse.ok) {\n          throw new Error('Failed to fetch issues');\n        }\n\n        // Fetch PRs count\n        const prsResponse = await fetch(`https://api.github.com/repos/${githubUrl}/pulls?state=open`, {\n          headers: {\n            Authorization: `token ${token}`,\n          },\n        });\n        \n        if (!prsResponse.ok) {\n          throw new Error('Failed to fetch pull requests');\n        }\n\n        // Fetch latest commit\n        // Get all commits (paginated by GitHub to latest 30 by default)\n        const commitsResponse = await fetch(`https://api.github.com/repos/${githubUrl}/commits`, {\n          headers: {\n            Authorization: `token ${token}`,\n          },\n        });\n        \n        if (!commitsResponse.ok) {\n          throw new Error('Failed to fetch commits');\n        }\n\n        const readmeContent = await readmeResponse.text();\n        const issues = await issuesResponse.json();\n        const prs = await prsResponse.json();\n        const commits = await commitsResponse.json();\n\n        // Process recent contributors\n        type GitHubCommit = {\n          author: {\n            login: string;\n            avatar_url: string;\n            html_url: string;\n          } | null;\n          commit: {\n            author: {\n              date: string;\n            };\n          };\n        };\n\n        const isBot = (username: string) => {\n          const botPatterns = [\n            /\\[bot\\]$/,          // Ends with [bot]\n            /bot$/i,             // Ends with 'bot' (case insensitive)\n            /^dependabot/,       // Dependabot\n            /^renovate/,         // Renovate bot\n            /^snyk-bot/,         // Snyk bot\n            /^greenkeeper/,      // Greenkeeper bot\n          ];\n          return botPatterns.some(pattern => pattern.test(username));\n        };\n\n        // Filter out bot commits first\n        const humanCommits = commits.filter((commit: GitHubCommit) => \n          commit.author && !isBot(commit.author.login)\n        );\n\n        // Create base data even if there are no human commits\n        const newData: GitHubData = {\n          readme: readmeContent,\n          issueCount: issues.length,\n          issuesUrl: `https://github.com/${githubUrl}/issues`,\n          prCount: prs.length,\n          prsUrl: `https://github.com/${githubUrl}/pulls`,\n          lastCommit: null,\n          recentContributors: [],\n        };\n\n        // Only process contributor data if we have human commits\n        if (humanCommits.length > 0) {\n\n          // Set the last commit data regardless of time\n          if (humanCommits[0].author) {\n            newData.lastCommit = {\n              date: new Date(humanCommits[0].commit.author.date).toLocaleDateString(),\n              author: humanCommits[0].author.login,\n              authorUrl: humanCommits[0].author.html_url,\n              commitUrl: humanCommits[0].html_url,\n              avatarUrl: humanCommits[0].author.avatar_url,\n            };\n          }\n\n          // Filter commits from the last month for other contributors\n          const oneMonthAgo = new Date();\n          oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n\n          const contributorsMap = new Map<string, Contributor>();\n          humanCommits.forEach((commit: GitHubCommit) => {\n            const commitDate = new Date(commit.commit.author.date);\n            if (commit.author && commitDate >= oneMonthAgo) {\n              const existingContributor = contributorsMap.get(commit.author.login);\n              if (existingContributor) {\n                existingContributor.commitCount++;\n              } else {\n                contributorsMap.set(commit.author.login, {\n                  login: commit.author.login,\n                  avatarUrl: commit.author.avatar_url,\n                  profileUrl: commit.author.html_url,\n                  commitCount: 1,\n                });\n              }\n            }\n          });\n\n          newData.recentContributors = Array.from(contributorsMap.values());\n        }\n        setData(newData);\n        setLoading(false);\n        return newData;\n      } catch (err: unknown) {\n        console.error('Error fetching GitHub data:', err);\n        setError((err as Error).message);\n        setLoading(false);\n        return null;\n      }\n    };\n\n    fetchGitHubData();\n  }, [entity, githubAuth]);\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">{error}</Alert>;\n  }\n\n  if (!data) {\n    return <Alert severity=\"warning\">No GitHub data available</Alert>;\n  }\n\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardHeader title=\"Repository Status\" />\n            <CardContent>\n              <p>\n                <a className={classes.link} href={data.issuesUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  Open Issues\n                </a>: {data.issueCount}\n              </p>\n              <p>\n                <a className={classes.link} href={data.prsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  Open Pull Requests\n                </a>: {data.prCount}\n              </p>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardHeader title=\"Recent Contributors\" />\n            <CardContent>\n              {data.lastCommit ? (\n                <>\n                  <Box className={classes.commitInfo} sx={{ marginBottom: 2 }}>\n                    <Typography variant=\"subtitle2\" style={{ marginRight: '8px' }}>Latest commit:</Typography>\n                    <Avatar className={classes.avatar} src={data.lastCommit.avatarUrl} alt={data.lastCommit.author} />{' '}\n                    <a className={classes.link} href={data.lastCommit.authorUrl} target=\"_blank\" rel=\"noopener noreferrer\">{data.lastCommit.author}</a> on <a className={classes.link} href={data.lastCommit.commitUrl} target=\"_blank\" rel=\"noopener noreferrer\">{data.lastCommit.date}</a>\n                  </Box>\n                  {data.recentContributors.length > 1 && (\n                    <>\n                      <Typography variant=\"subtitle2\" gutterBottom>Other contributors in the last 30 days:</Typography>\n                      <Box className={classes.contributorsList}>\n                        {data.recentContributors\n                          .filter(contributor => data.lastCommit && contributor.login !== data.lastCommit.author)\n                          .map(contributor => (\n                            <Box key={contributor.login} className={classes.commitInfo} sx={{ marginBottom: 1 }}>\n                              <Avatar className={classes.avatar} src={contributor.avatarUrl} alt={contributor.login} />{' '}\n                              <a className={classes.link} href={contributor.profileUrl} target=\"_blank\" rel=\"noopener noreferrer\">{contributor.login}</a>\n                              <Typography variant=\"body2\" color=\"textSecondary\" style={{ marginLeft: '8px' }}>\n                                ({contributor.commitCount} {contributor.commitCount === 1 ? 'commit' : 'commits'} in the last 30 days)\n                              </Typography>\n                            </Box>\n                          ))}\n                      </Box>\n                    </>\n                  )}\n                </>\n              ) : (\n                <Typography variant=\"body1\" color=\"textSecondary\">\n                  No non-automated commits found. All changes were made by automated processes.\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      <Card style={{ marginTop: '24px' }}>\n        <CardHeader title=\"README\" />\n        <CardContent>\n          <ReactMarkdown>{data.readme}</ReactMarkdown>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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"}